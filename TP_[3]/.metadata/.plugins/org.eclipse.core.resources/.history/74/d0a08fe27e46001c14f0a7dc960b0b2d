#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"
#include "Controller.h"
#include "inputUtn.h"
#include "Employee.h"


Employee* employee_new()
{
	Employee *auxEmployee;

	auxEmployee = (Employee*) malloc(sizeof(auxEmployee));
/*	auxEmployee->id = 0;
	strcpy(auxEmployee->nombre, " ");
	auxEmployee->horasTrabajadas = 0;
	auxEmployee->sueldo = 0;*/
	employee_setFields(auxEmployee, 1, " ", 1, 1);
	return auxEmployee;
}

Employee* employee_newParametros(char* idStr,char* nombreStr,char* horasTrabajadasStr, char* sueldoStr)
{
	Employee* pEmployee;
	int auxId;
	int auxHoras;
	int auxSueldo;
	pEmployee=employee_new();
	if(pEmployee!=NULL && idStr!=NULL && nombreStr!=NULL && horasTrabajadasStr!=NULL && sueldoStr!= NULL)
	{
		printf("ESTOY EN ATOI");
		auxId=atoi(idStr);
		auxHoras=atoi(horasTrabajadasStr);
		auxSueldo=atoi(sueldoStr);
	}
	if(employee_setFields(pEmployee, auxId, nombreStr, auxHoras, auxSueldo)!=0)
	{
		free(pEmployee);
		printf("Im FREEEE frito");
	}
	return pEmployee;
}
int employee_setFields(Employee* aEmp, int auxId, char* auxNombre, int auxHoras, int auxSueldo)
{
	int retorno=-1;

	if(employee_setId(aEmp,auxId)==0 && employee_setNombre(aEmp,auxNombre)==0 &&
	employee_setHorasTrabajadas(aEmp,auxHoras)==0 && employee_setSueldo(aEmp, auxSueldo)==0)
	{
		retorno=0;
	}

	return retorno;
}

int employee_getId(Employee* aEmp,int* newId)
{
    int retorno=-1;

    if(aEmp != NULL && newId != NULL)
    {
        *newId= aEmp->id;
        retorno=0;
    }
    return retorno;
}


int employee_setId(Employee* aEmp,int newId)
{
    int retorno=-1;

    if(aEmp != NULL && newId >0)
    {
       aEmp->id= newId;
        retorno=0;
    }
    return retorno;
}


int employee_setNombre(Employee* this,char* nombre)
{
	int retorno=-1;

	if(this!=NULL && nombre!=NULL)
	{
			retorno=0;
			strcpy(this->nombre,nombre);
	}

	return retorno;
}
int employee_getNombre(Employee* this,char* nombre)
{
	int retorno=-1;

	if(this!=NULL && nombre!=NULL)
	{
		retorno=0;
		strcpy(nombre,this->nombre);
	}

	return retorno;
}

int employee_setHorasTrabajadas(Employee* this,int horasTrabajadas)
{
	 int retorno=-1;

	    if(this!= NULL && horasTrabajadas>0)
	    {
	        retorno=0;
	        this->horasTrabajadas=horasTrabajadas;
	    }
	    return retorno;
}

int employee_getHorasTrabajadas(Employee* this,int* horasTrabajadas)
{
	 int retorno=-1;
	    if(this!= NULL && horasTrabajadas != NULL)
	    {
	        retorno=0;
	        *horasTrabajadas= this->horasTrabajadas;
	    }
	    return retorno;
}

int employee_setSueldo(Employee* this,int sueldo)
{
	int retorno;

	    retorno=-1;
	    if(this != NULL && sueldo>0)
	    {
	       retorno=0;
	       this->sueldo= sueldo;
	    }
	    return retorno;
}

int employee_getSueldo(Employee* this,int* sueldo)
{
	  int retorno=-1;


	    if(this != NULL && sueldo>0)
	    {
	        retorno=0;
	        *sueldo= this->sueldo;
	    }
	    return retorno;
}

void employee_delete(Employee *this) {
	if (this != NULL) {
		free(this);
	}
}


int addEmployee(Employee* pEmp,int id) {

	int retorno =-1;
	char nombre[256];
	int salario;
	int horas=0;
	id=0;

	if (pEmp!= NULL) {

			if (getStringSoloLetras("\n Ingrese el nombre del empleado \n","\n Error, intente nuevamente ingresando SOLO letras. \n",nombre,51,2) != 1) {
				printf("\n Error, intente nuevamente ingresando SOLO letras. \n");
			}

			getValidInt("\n Ingrese la cantidad de Horas Trabajadas \n","\n Error, intente nuevamente ingresando SOLO numeros. \n", 0, 5000);

			chargeSalary(&salario, "\n Inrese el salario", "\n Error, cargue el salario nuevamente");

			if(employee_setFields(pEmp, id, nombre, horas, salario)==0)
			{
				retorno=0;
			}

		}
	return retorno;
	}


void chargeSalary(int *salario, char mensaje[], char mensajeError[]) {
	char auxSalario[51];

	printf("%s", mensaje);
	scanf("%s", auxSalario);

	while (esNumerico(auxSalario)==0) {
		printf("%s", mensajeError);
		scanf("%s", auxSalario);
	}

	*salario = atoi(auxSalario);

}

int obtenerId(char* path, int* id)
{
	int retorno=-1;
	FILE* pFile;

	if(path!=NULL && id!=NULL)
	{
		pFile=fopen(path,"r");
		fscanf(pFile,"%d",id);
		retorno=0;
	}
	fclose(pFile);
	return retorno;
}

void autoIncremental(char* path)
{
	FILE* pFile;
	int id=0;

		if(path!=NULL)
		{
			pFile=fopen(path,"w");
			id+=1;
			fprintf(pFile,"%n",&id);
		}
		fclose(pFile);
}

void Mostrar_UnEmpleado(Employee* auxEmpleado)
{
    int auxId;
    char auxNombre[128];
    int auxSueldo;
    int auxHorasT;
    employee_getNombre(auxEmpleado,auxNombre);
    employee_getId(auxEmpleado,&auxId);
	employee_getSueldo(auxEmpleado,&auxSueldo);
	employee_getHorasTrabajadas(auxEmpleado,&auxHorasT);
    printf("| %-4d  | %-16s  | %-4d  | $%d  |\n",auxId,auxNombre,auxHorasT,auxSueldo);
}
